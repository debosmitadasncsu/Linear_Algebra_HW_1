# This is a start to exploring your data, sets a color pallet for each variable.
#install.packages("RColorBrewer")
load('C:\\Users\\Andy Dotter\\Documents\\Fall_2018\\Fall_1\\Linear Algebra\\Homework\\LeukError.RData')
library(RColorBrewer)
library(dplyr)
display.brewer.all()
palette(brewer.pal(n = 6, name = "Dark2"))
########################################################################################

########################################################################################
#' Now let's compute the first two principal components and examine the data
#' projected onto these axes. We can then look in 3 dimensions.
########################################################################################
# Now project onto first two principal components. Notice how it is pretty well seperated. Seperated mostly on first principal component.

pcaOut = prcomp(leuk[,1:5000],3, scale = F)
# below code gave an error for not being able to rescale zero constatn/unit vectors
#pcaOut2 = prcomp(leuk[,1:5000],3,scale = T)

#plot(pcaOut$x[,1],pcaOut$x[,2],col= leuk[,5001], xlab = "Principal Component 1", ylab = "Principal Component 2", pch=15)

#legend("bottomright" ,legend=leuk[,5001], col=leuk[,5001], pch=15)
#text(x = pcaOut$x[,1], y= pcaOut$x[,2], labels = row.names(leuk), adj= 0,3)
# row name 22
## 2-D Graphic

plot(pcaOut$x[,1],pcaOut$x[,2],col= leuk[,5001], xlab = "Principal Component 1", ylab = "Principal Component 2", pch=15)

legend("bottomright" ,legend=factors, col=factors, pch=15)
text(x = pcaOut$x[,1], y= pcaOut$x[,2], labels = row.names(leuk), adj= 0,3)

rows <- c("20","21","22","23","24","25","26","27")
row_Names <- row.names(leuk)
#class(rows)
#class(row_Names)

#View(leuk[rows,5001])
#View(leuk[row_Names,5001])
# Create Data Frame with row names in it.
Demo <- data.frame(leuk,row_Names)
View(Demo[,5001:5002])

factors <- as.factor(unique(leuk[,5001]))

########################################################################################
# 3-dimensional plot. Problem is to get the plot points colored by group, we need to 
# write a function that creates a vector of colors 
colors = factor(palette())
colors = colors[leuk[,5001]]
#' make sure the rgl package is installed for the 3d plot.
#install.packages("rgl")
library(rgl)

plot3d(x = pcaOut$x[,1], y = pcaOut$x[,2],z= pcaOut$x[,3],col = colors, xlab = "Principal Component 1", ylab = "Principal Component 2", zlab = "Principal Component 3")
text3d(x = pcaOut$x[,1], y= pcaOut$x[,2], z= pcaOut$x[,3], row.names(leuk), adj= 0,2,0)
# Point 22

########################################################################################
# Proportion of Variance explained by 2 components
sum(pcaOut$sdev[1:2]^2)/sum(pcaOut$sdev^2)
# Proportion of Variance explained by 3 components
sum(pcaOut$sdev[1:3]^2)/sum(pcaOut$sdev^2)
########################################################################################
#sum(pcaOut2$sdev[1:2]^2)/sum(pcaOut2$sdev^2)
# Proportion of Variance explained by 3 components
#sum(pcaOut2$sdev[1:3]^2)/sum(pcaOut2$sdev^2)



# FROM HELP(PRCOMP):
# prcomp returns a list with class "prcomp" containing the following components:
# sdev:	
# the standard deviations of the principal components (i.e., the square roots of the eigenvalues of the covariance/correlation matrix, though the calculation is actually done with the singular values of the data matrix).
# rotation:	
# the matrix of variable loadings (i.e., a matrix whose columns contain the eigenvectors). The function princomp returns this in the element loadings.
# x:	
# if retx is true the value of the rotated data (the centred (and scaled if requested) data multiplied by the rotation matrix) is returned. Hence, cov(x) is the diagonal matrix diag(sdev^2). For the formula method, napredict() is applied to handle the treatment of values omitted by the na.action.
# center, scale:	
# the centering and scaling used, or FALSE. 
